{"ast":null,"code":"var _jsxFileName = \"/home/aasdia/Documents/GainBNB/BNBGain/src/Components/TopNavBar.js\";\nimport React from 'react';\nimport { Navbar, Button } from 'react-bootstrap';\nimport './comp.css';\nimport getWeb3 from \"./getWeb3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function TopNavBar() {\n  getWeb = async () => {\n    try {\n      // Get network provider and web3 instance.\n      console.log(\"inside getweb\");\n      const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n      const accounts = await web3.eth.getAccounts();\n      let account = accounts[0]; //Check Account Balance\n\n      let accbalance = await web3.eth.getBalance(accounts[0]);\n      accbalance = web3.utils.fromWei(accbalance); // Get the contract instance.\n\n      const networkId = await web3.eth.net.getId();\n      const SendMoneyContract = new web3.eth.Contract(this.ABI, this.ContractAddress);\n      SendMoneyContract.options.address = this.ContractAddress;\n      let conBalance = await web3.eth.getBalance(this.ContractAddress);\n      conBalance = web3.utils.fromWei(conBalance); // let sendToContract = await instance.methods.receiveMoney().send({from:account,to:this.ContractAddress, value:web3.utils.toWei('5', 'ether')});\n      // console.log(sendToContract);\n      // let value = await web3.utils.toWei('1', 'ether');\n      // const receipt = await instance.methods.withdrawMoney(value).send({from:account});\n\n      this.setState({\n        web3,\n        account,\n        accountBalance: accbalance,\n        contract: this.ContractAddress,\n        contractBalance: conBalance,\n        connected: true\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n      console.error(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"navbar\",\n    children: /*#__PURE__*/_jsxDEV(Navbar, {\n      id: \"topnav\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outline-primary\",\n        id: \"btnConnect\",\n        children: \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n_c = TopNavBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"TopNavBar\");","map":{"version":3,"sources":["/home/aasdia/Documents/GainBNB/BNBGain/src/Components/TopNavBar.js"],"names":["React","Navbar","Button","getWeb3","TopNavBar","getWeb","console","log","web3","accounts","eth","getAccounts","account","accbalance","getBalance","utils","fromWei","networkId","net","getId","SendMoneyContract","Contract","ABI","ContractAddress","options","address","conBalance","setState","accountBalance","contract","contractBalance","connected","error","alert"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAgBC,MAAhB,QAA6B,iBAA7B;AACA,OAAO,YAAP;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,OAAO,SAASC,SAAT,GAAqB;AAExBC,EAAAA,MAAM,GAAG,YAAY;AACjB,QAAI;AACF;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,YAAMC,IAAI,GAAG,MAAML,OAAO,EAA1B,CAHE,CAIF;;AACA,YAAMM,QAAQ,GAAG,MAAMD,IAAI,CAACE,GAAL,CAASC,WAAT,EAAvB;AACA,UAAIC,OAAO,GAAGH,QAAQ,CAAC,CAAD,CAAtB,CANE,CAQF;;AACA,UAAII,UAAU,GAAG,MAAML,IAAI,CAACE,GAAL,CAASI,UAAT,CAAoBL,QAAQ,CAAC,CAAD,CAA5B,CAAvB;AACAI,MAAAA,UAAU,GAAGL,IAAI,CAACO,KAAL,CAAWC,OAAX,CAAmBH,UAAnB,CAAb,CAVE,CAYF;;AACA,YAAMI,SAAS,GAAG,MAAMT,IAAI,CAACE,GAAL,CAASQ,GAAT,CAAaC,KAAb,EAAxB;AACA,YAAMC,iBAAiB,GAAG,IAAIZ,IAAI,CAACE,GAAL,CAASW,QAAb,CAAsB,KAAKC,GAA3B,EAA+B,KAAKC,eAApC,CAA1B;AACAH,MAAAA,iBAAiB,CAACI,OAAlB,CAA0BC,OAA1B,GAAoC,KAAKF,eAAzC;AACA,UAAIG,UAAU,GAAG,MAAMlB,IAAI,CAACE,GAAL,CAASI,UAAT,CAAoB,KAAKS,eAAzB,CAAvB;AACAG,MAAAA,UAAU,GAAElB,IAAI,CAACO,KAAL,CAAWC,OAAX,CAAmBU,UAAnB,CAAZ,CAjBE,CAkBF;AACA;AACA;AACA;;AACA,WAAKC,QAAL,CAAc;AAAEnB,QAAAA,IAAF;AAAQI,QAAAA,OAAR;AAAiBgB,QAAAA,cAAc,EAAEf,UAAjC;AAA6CgB,QAAAA,QAAQ,EAAC,KAAKN,eAA3D;AAA4EO,QAAAA,eAAe,EAAEJ,UAA7F;AAAyGK,QAAAA,SAAS,EAAE;AAApH,OAAd;AACD,KAvBD,CAuBE,OAAOC,KAAP,EAAc;AACd;AACAC,MAAAA,KAAK,CACF,wEADE,CAAL;AAGA3B,MAAAA,OAAO,CAAC0B,KAAR,CAAcA,KAAd;AACD;AACF,GA/BH;;AAiCA,sBACI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,2BACI,QAAC,MAAD;AAAQ,MAAA,EAAE,EAAC,QAAX;AAAA,6BACI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,iBAAhB;AAAkC,QAAA,EAAE,EAAC,YAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;KA1Ce5B,S","sourcesContent":["import React from 'react';\nimport {Navbar, Button} from 'react-bootstrap';\nimport './comp.css';\nimport getWeb3 from \"./getWeb3\";\n\nexport function TopNavBar() {\n\n    getWeb = async () => {\n        try {\n          // Get network provider and web3 instance.\n          console.log(\"inside getweb\");\n          const web3 = await getWeb3();\n          // Use web3 to get the user's accounts.\n          const accounts = await web3.eth.getAccounts();\n          let account = accounts[0];\n    \n          //Check Account Balance\n          let accbalance = await web3.eth.getBalance(accounts[0]);\n          accbalance = web3.utils.fromWei(accbalance);\n          \n          // Get the contract instance.\n          const networkId = await web3.eth.net.getId();\n          const SendMoneyContract = new web3.eth.Contract(this.ABI,this.ContractAddress);\n          SendMoneyContract.options.address = this.ContractAddress;\n          let conBalance = await web3.eth.getBalance(this.ContractAddress);\n          conBalance= web3.utils.fromWei(conBalance);\n          // let sendToContract = await instance.methods.receiveMoney().send({from:account,to:this.ContractAddress, value:web3.utils.toWei('5', 'ether')});\n          // console.log(sendToContract);\n          // let value = await web3.utils.toWei('1', 'ether');\n          // const receipt = await instance.methods.withdrawMoney(value).send({from:account});\n          this.setState({ web3, account, accountBalance: accbalance, contract:this.ContractAddress, contractBalance: conBalance, connected: true });\n        } catch (error) {\n          // Catch any errors for any of the above operations.\n          alert(\n            `Failed to load web3, accounts, or contract. Check console for details.`,\n          );\n          console.error(error);\n        }\n      };\n\n    return (\n        <div className=\"navbar\">\n            <Navbar id=\"topnav\">\n                <Button variant=\"outline-primary\" id=\"btnConnect\">Connect</Button>\n            </Navbar>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}