{"ast":null,"code":"var _jsxFileName = \"/home/aasdia/Documents/GainBNB/react-xlite-repo/src/App.js\";\nimport './App.css';\nimport React, { Component } from \"react\";\nimport getWeb3 from \"./getWeb3\"; //import Dashboard from './Dashboard';\n// import {Cards} from './Components/Cards';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getWeb = async () => {\n      try {\n        function withdraw() {\n          alert(\"Withdraw\");\n        } // Get network provider and web3 instance.\n\n\n        console.log(\"inside getweb\");\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts();\n        const defaultAccount = accounts[0];\n        const balance = await web3.eth.getBalance(accounts[0]);\n        console.log(web3.utils.fromWei(balance)); // accounts = web3.utils.toChecksumAddress(accounts[0]);\n        // console.log(web3.utils.isAddress(defaultAccount));\n        // console.log(accounts);\n        // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        console.log(\"Network ID \" + networkId); // const instance = new web3.eth.Contract(\n        //   abi,\n        //   deployedNetwork.address,\n        // );\n        // console.log(instance);\n        // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          balance,\n          connected: true\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    this.withdraw = async () => {\n      // Stores a given value, 5 by default.\n      await contract.methods.transfer(\"0x3AB71533664122209b5A788D4FAa72be963523FA\", 5).send({\n        from: accounts[0]\n      }).then(res => {\n        console.log(res);\n      });\n    };\n\n    this.deposit = async () => {\n      alert(\"Deposit\");\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-primary \",\n        id: \"metamask\",\n        onClick: this.getWeb,\n        children: \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-primary \",\n        id: \"metamask\",\n        onClick: this.getWeb.withdraw(),\n        children: \"Withdraw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-primary \",\n        id: \"metamask\",\n        onClick: this.deposit,\n        children: \"Deposit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/aasdia/Documents/GainBNB/react-xlite-repo/src/App.js"],"names":["React","Component","getWeb3","App","getWeb","withdraw","alert","console","log","web3","accounts","eth","getAccounts","defaultAccount","balance","getBalance","utils","fromWei","networkId","net","getId","setState","connected","error","contract","methods","transfer","send","from","then","res","deposit","render"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from \"react\";\nimport getWeb3 from \"./getWeb3\";\n//import Dashboard from './Dashboard';\n// import {Cards} from './Components/Cards';\n\n\nclass App extends Component {\n\n  getWeb = async () => {\n    try {\n\n      function withdraw() {\n        alert(\"Withdraw\");\n      }\n      // Get network provider and web3 instance.\n      console.log(\"inside getweb\");\n      const web3 = await getWeb3();\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      const defaultAccount = accounts[0];\n      const balance = await web3.eth.getBalance(accounts[0]);\n      console.log(web3.utils.fromWei(balance));\n      // accounts = web3.utils.toChecksumAddress(accounts[0]);\n      // console.log(web3.utils.isAddress(defaultAccount));\n      // console.log(accounts);\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      console.log(\"Network ID \" + networkId);\n      // const instance = new web3.eth.Contract(\n      //   abi,\n      //   deployedNetwork.address,\n      // );\n        // console.log(instance);\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n        this.setState({web3, accounts,balance ,connected:true});\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  withdraw = async ()  =>\n  {\n     \n      // Stores a given value, 5 by default.\n    await contract.methods.transfer(\"0x3AB71533664122209b5A788D4FAa72be963523FA\",5)\n    .send({ from: accounts[0] }).then(res => {\n      console.log(res); \n    });\n  }\n\n  deposit = async ()  =>\n  {\n    alert(\"Deposit\");\n  }\n\n  render() {\n    return(\n        <div className=\"App\">\n      <button type=\"button\" className=\"btn btn-primary \" id=\"metamask\" onClick={this.getWeb}>\n          Connect\n      </button>\n      <button type=\"button\" className=\"btn btn-primary \" id=\"metamask\" onClick={this.getWeb.withdraw()}>\n           Withdraw\n      </button>\n      <button type=\"button\" className=\"btn btn-primary \" id=\"metamask\" onClick={this.deposit}>\n           Deposit\n      </button>\n    </div>\n  );\n}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}