{"ast":null,"code":"var _jsxFileName = \"/home/aasdia/Documents/GainBNB/react-xlite-repo/src/App.js\";\nimport './App.css';\nimport React, { Component } from \"react\";\nimport getWeb3 from \"./getWeb3\"; //import Dashboard from './Dashboard';\n\nimport { Cards, Income } from './Components/Cards';\nimport { Card } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.cssStyle = {\n      width: \"100%\",\n      margin: \"10px auto\"\n    };\n    this.cardStyle = {\n      width: \"50rem\",\n      color: \"black\"\n    };\n    this.connection1 = /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: \"green\"\n      },\n      children: \"Connection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 15\n    }, this);\n    this.connection2 = /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: \"red\"\n      },\n      children: \"Connection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 15\n    }, this);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      connected: false,\n      accounts: null,\n      balance: 0,\n      contract: null\n    };\n\n    this.getWeb = async () => {\n      try {\n        // Get network provider and web3 instance.\n        console.log(\"inside getweb\");\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts();\n        const defaultAccount = accounts[0];\n        const balance = await web3.eth.getBalance(accounts[0]);\n        console.log(web3.utils.fromWei(balance)); // accounts = web3.utils.toChecksumAddress(accounts[0]);\n        // console.log(web3.utils.isAddress(defaultAccount));\n        // console.log(accounts);\n        // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        console.log(\"Network ID \" + networkId); // const instance = new web3.eth.Contract(\n        //   abi,\n        //   deployedNetwork.address,\n        // );\n        // console.log(instance);\n        // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          balance,\n          connected: true\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    this.disconnect = async () => {\n      this.setState = [];\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"navbar navbar-light bg-light\",\n        style: this.cssStyle,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"navbar-brand\",\n            children: \"Dashboard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 11\n          }, this), this.state.connected ? this.connection1 : this.connection2]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-primary \",\n        style: {\n          marginBottom: \"5px\"\n        },\n        onClick: this.getWeb,\n        children: \"Login with Metmask\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-primary \",\n        style: {\n          marginBottom: \"5px\"\n        },\n        onClick: this.disconnect,\n        children: \"Disconnect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container col-lg-12\",\n        children: [/*#__PURE__*/_jsxDEV(Card, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Income, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/aasdia/Documents/GainBNB/react-xlite-repo/src/App.js"],"names":["React","Component","getWeb3","Cards","Income","Card","App","cssStyle","width","margin","cardStyle","color","connection1","connection2","state","storageValue","web3","connected","accounts","balance","contract","getWeb","console","log","eth","getAccounts","defaultAccount","getBalance","utils","fromWei","networkId","net","getId","setState","error","alert","disconnect","render","marginBottom"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from \"react\";\nimport getWeb3 from \"./getWeb3\";\n//import Dashboard from './Dashboard';\nimport {Cards, Income} from './Components/Cards';\nimport { Card } from 'react-bootstrap';\n\nclass App extends Component {\n cssStyle = {\n    width: \"100%\",\n    margin : \"10px auto\"\n  };\n\n  cardStyle={\n    width: \"50rem\",\n    color: \"black\"\n}\nconnection1 = <span style={{color:\"green\"}}>Connection</span>\nconnection2 = <span style={{color:\"red\"}}>Connection</span>\nstate = { storageValue: 0, web3: null, connected: false, accounts: null, balance: 0, contract: null };\n\n  getWeb = async () => {\n    try {\n      // Get network provider and web3 instance.\n      console.log(\"inside getweb\");\n      const web3 = await getWeb3();\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      const defaultAccount = accounts[0];\n      const balance = await web3.eth.getBalance(accounts[0]);\n      console.log(web3.utils.fromWei(balance));\n      // accounts = web3.utils.toChecksumAddress(accounts[0]);\n      // console.log(web3.utils.isAddress(defaultAccount));\n      // console.log(accounts);\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      console.log(\"Network ID \" + networkId);\n      // const instance = new web3.eth.Contract(\n      //   abi,\n      //   deployedNetwork.address,\n      // );\n        // console.log(instance);\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n        this.setState({web3, accounts,balance ,connected:true});\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  disconnect = async()=>{\n    this.setState = []\n  }\n\n  render() {\n    return(\n    <div className=\"App-header\">\n      <nav className=\"navbar navbar-light bg-light\" style={this.cssStyle}>\n        <div className=\"App\">\n          <span className=\"navbar-brand\">Dashboard</span>\n          {this.state.connected?this.connection1:this.connection2}\n        </div>\n      </nav>\n      <button type=\"button\" className=\"btn btn-primary \" style={{marginBottom:\"5px\"}} onClick={this.getWeb}>\n        Login with Metmask\n      </button>\n      <button type=\"button\" className=\"btn btn-primary \" style={{marginBottom:\"5px\"}} onClick={this.disconnect}>\n        Disconnect\n      </button>\n      <div className=\"container col-lg-12\">\n          <Card/>\n          <Income/>\n      </div>\n      {/* <Dashboard state={this.state} /> */}\n      {/* <div className=\"card\" style={this.cardStyle}>\n                    <div className=\"card-body\">\n                        <h5 className=\"card-text\" style={{boxSizing:\"border-box\"}}>Account:<span>{this.accounts}</span></h5>\n                        <p className=\"card-text\">Balance:</p>\n                    </div> */}\n      {/* </div> */}\n    </div>\n  );\n}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}